head(top_10, 1)
highest_ratio_state <- top_10 %>%
summarize(max = max(top_10))
View(top_10_ratio_states_)
average_prison_ratios <- prison %>%
group_by(state) %>%
summarize(
black_to_white_ratio = sum(black_prison_pop, na.rm = TRUE) / sum(white_prison_pop, na.rm = TRUE)
)
sorted_ratio_states <- average_prison_ratios %>%
arrange(desc(black_to_white_ratio)) %>%
head(10)
top_10 <- sorted_ratio_states$state
sorted_ratio_states <- average_prison_ratios %>%
arrange(desc(black_to_white_ratio)) %>%
head(10)
View(sorted_ratio_states)
highest_ratio_state <- head(sorted_ratio_states, 1)
View(highest_ratio_state)
highest_state <- sorted_ratio_states$state
highest_state <- highest_ratio_state$state
highest_ratio <- highest_ratio_state$black_to_white_ratio
average_data <- prison %>%
group_by(state) %>%
summarize(
average_prison_pop = mean(total_prison_pop, na.rm = TRUE),
black_to_white_ratio = sum(black_prison_pop, na.rm = TRUE) / sum(white_prison_pop, na.rm = TRUE)
)
ggplot(average_data, aes(x = average_prison_pop, y = black_to_white_ratio)) +
geom_point() +
labs(title = "Correlation between Average Prison Population Size and Average Black to White Ratio",
x = "Average Prison Population Size",
y = "Average Black to White Ratio") +
theme_minimal()
ggplot(sorted_data, aes(x = year, y = black_to_white_ratio, color = state)) +
geom_line() +
labs(title = "Black to White Inmate Population Ratio in Top 10 States Over Time",
x = "Year",
y = "Black to White Ratio",
color = "State") +
theme_minimal()
View(filtered_data)
library(ggplot2)
# graph 2 - correlation between average population size and black to white ratio
library(ggplot2)
print(total_average_white_prison_pop)
print(total_average_black_prison_pop)
head(average_prison_ratios)
print(sorted_ratio_states)
print(highest_state)
print(highest_ratio)
library(ggplot2)
View(sorted_ratio_states)
View(sorted_states)
View(average_prison_ratios_all)
View(average_prison_ratios_no_pop)
prison_obs <- nrow(prison)
print(prison_obs)
prison_vars <- ncol(prison)
print(prison_vars)
library(dplyr)
total_average_white_prison_pop <- mean(prison$white_prison_pop, na.rm = TRUE)
print(total_average_white_prison_pop)
total_average_black_prison_pop <- mean(prison$black_prison_pop, na.rm = TRUE)
print(total_average_black_prison_pop)
average_prison_ratios <- prison %>%
group_by(state) %>%
summarize(
black_to_white_ratio = sum(black_prison_pop, na.rm = TRUE) / sum(white_prison_pop, na.rm = TRUE)
)
View(average_prison_ratios)
sorted_states <- prison %>%
group_by(state) %>%
summarize(
black_to_white_ratio = sum(black_prison_pop, na.rm = TRUE) / sum(white_prison_pop, na.rm = TRUE)
) %>%
arrange(desc(black_to_white_ratio))
View(sorted_states)
black_white_ratios_mapped <- sorted_states %>%
left_join(state_mapping, by = c("state" = "state_abbr")) %>%
rename(region = state_full) %>%
mutate(region = tolower(region))
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
size = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
labs(fill = "Black to White Ratio")
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
linewidth = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
labs(fill = "Black to White Ratio")
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(),        # remove axis lines
axis.text = element_blank(),        # remove axis labels
axis.ticks = element_blank(),       # remove axis ticks
axis.title = element_blank(),       # remove axis titles
plot.background = element_blank(),  # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank()      # remove border around plot
)
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
linewidth = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
labs(fill = "Black to White Ratio") +
blank_theme # variable containing map styles (defined in next code snippet)
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
linewidth = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
main = "Geographical Distribution of Black to White Prison Population Ratios"
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
linewidth = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
main = "Geographical Distribution of Black to White Prison Population Ratios" +
labs(fill = "Black to White Ratio") +
blank_theme # variable containing map styles (defined in next code snippet)
ggplot(merged_data) +
geom_polygon(
mapping = aes(x = long, y = lat, group = group, fill = black_to_white_ratio),
color = "white", # show state outlines
linewidth = .1        # thinly stroked
) +
coord_map() + # use a map-based coordinate system
scale_fill_continuous(low = "#132B43", high = "Red") +
labs(title = "Geographical Distribution of Black to White Prison Population Ratios", fill = "Black to White Ratio") +
blank_theme # variable containing map styles (defined in next code snippet)
View(average_data)
View(average_data)
library(ggplot2)
average_data <- prison %>%
group_by(state) %>%
summarize(
average_prison_pop = mean(total_prison_pop, na.rm = TRUE),
black_to_white_ratio = sum(black_prison_pop, na.rm = TRUE) / sum(white_prison_pop, na.rm = TRUE)
)
filtered_average_data <- average_data %>%
filter(!is.na(average_prison_pop) & !is.na(black_to_white_ratio))
ggplot(filtered_average_data, aes(x = average_prison_pop, y = black_to_white_ratio)) +
geom_point() +
labs(title = "Correlation between Average Prison Population Size and Average Black to White Ratio",
x = "Average Prison Population Size",
y = "Average Black to White Ratio") +
theme_minimal()
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(),        # remove axis lines
axis.text = element_blank(),        # remove axis labels
axis.ticks = element_blank(),       # remove axis ticks
axis.title = element_blank(),       # remove axis titles
plot.background = element_blank(),  # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank()      # remove border around plot
)
View(blank_theme)
sorted_ratio_states
View(sorted_ratio_states)
library(ggplot2)
library(dpylr)
library(dplyr)
library(ggplot2)
library(dplyr)
library(tidyr)
setwd("/Users/meha/Desktop/INFO/info201/code/exploratory-analysis-p02-mehasingal")
data <- read.csv("maryland_crash_report.csv")
View(data)
head(data)
View(data)
filtered <- data %>%
filter(data$Crash.Date.Time) %>%
filter(data$Driver.Substance.Abuse)
filtered <- data %>%
select(Crash.Date.Time, Driver.Substance.Abuse)
View(filtered)
head(filtered)
alcohol_present_data <- data %>%
filter(Driver.Substance.Abuse == "ALCOHOL PRESENT")
View(alcohol_present_data)
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_histogram(binwidth = "days", fill = "blue", color = "black") +
labs(title = "Frequency of 'ALCOHOL PRESENT' Observations Over Time",
x = "Date", y = "Frequency") +
theme_minimal()
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_bar(fill = "blue", color = "black", stat = "identity") +
labs(title = "Frequency of 'ALCOHOL PRESENT' Observations Over Time",
x = "Date", y = "Frequency") +
theme_minimal()
# Filter data for "ALCOHOL PRESENT" observations
alcohol_present_data <- data %>%
filter(Driver.Substance.Abuse == "ALCOHOL PRESENT")
# Convert Crash.Date.Time to POSIXct format
alcohol_present_data$Crash.Date.Time <- as.POSIXct(
alcohol_present_data$Crash.Date.Time, format = "%m/%d/%Y %I:%M:%S %p"
)
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_line(stat = "bin", aes(y = ..count..), binwidth = "1 week") +
labs(title = "Frequency of 'ALCOHOL PRESENT' Observations Over Time",
x = "Date", y = "Frequency") +
theme_minimal()
# Filter data for "ALCOHOL PRESENT" observations
alcohol_present_data <- data %>%
filter(Driver.Substance.Abuse == "ALCOHOL PRESENT")
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
# Create a line graph
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_line(stat = "bin", aes(y = ..count..), binwidth = 7) +
labs(title = "Frequency of 'ALCOHOL PRESENT' Observations Over Time",
x = "Date", y = "Frequency") +
theme_minimal()
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
View(alcohol_present_data)
library(ggplot2)
library(dplyr)
library(tidyr)
filtered <- data %>%
select(Crash.Date.Time, Driver.Substance.Abuse)
head(filtered)
alcohol_present_data <- filtered %>%
filter(Driver.Substance.Abuse == "ALCOHOL PRESENT")
View(alcohol_present_data)
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
View(alcohol_present_data)
ggplot(alcohol_present_data, aes(x = Crash.Date.Time, y = Driver.Substance.Abuse)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
ggplot(alcohol_present_data, aes(x = Crash.Date.Time)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
# Summarize the data by date to get counts
summarized_data <- alcohol_present_data %>%
group_by(Crash.Date.Time) %>%
summarise(Count = n())
View(summarized_data)
ggplot(summarized_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
# filter data for only alcohol contributed crashes
alcohol_present_data <- filtered %>%
filter(Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED")
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
# filter data for only alcohol contributed crashes
alcohol_contributed_data <- filtered %>%
filter(Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED")
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
# Summarize the data by date to get counts
count_data <- alcohol_contributed_data %>%
group_by(Crash.Date.Time) %>%
summarise(Count = n())
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Year", y = "Number of Crashes") +
theme_minimal()
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
geom_text(aes(label = format(Crash.Date.Time, "%b %d, %Y")), vjust = -0.5, size = 3, angle = 90) +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Hide original x-axis text
marker_date <- as.Date("2020-04-01")
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
geom_vline(xintercept = as.numeric(marker_date), color = "red", linetype = "dashed") +
geom_text(aes(label = format(Crash.Date.Time, "%b %d, %Y")), vjust = -0.5, size = 3, angle = 90) +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal() +
theme(axis.text.x = element_blank())  # Hide original x-axis text
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
geom_vline(xintercept = as.numeric(marker_date), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal()
covid_start <- as.Date("2020-04-01")
covid_end <- as.Date("2022-04-01")
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes") +
theme_minimal()
ggplot(count_data, aes(x = Crash.Date.Time)) +
geom_bar(stat = "identity", color = "blue", fill = "blue", width = 0.8) +  # Adjust width
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue", width = 0.8) +  # Adjust width
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue", width = 0.8) +  # Adjust width
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Number of Crashes") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))  # Rotate x-axis labels for better visibility
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", color = "blue", fill = "blue") +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", fill = "blue") +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", fill = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Crash.Date.Time, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
print(alcohol_related_accidents_overtime)
print(alcohol_related_accidents_overtime)
average_counts <- count_data%>%
group_by(Crash.Date.Time) %>%
summarise(AverageCount = mean(Count))
ggplot(average_counts, aes(x = Crash.Date.Time, y = AverageCount)) +
geom_line(color = "blue") +
labs(title = "Average Number of Alcohol-Related Car Crashes Over Time",
x = "Date", y = "Average Number of Crashes") +
theme_minimal()
alcohol_present_data <- data[data$Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED" &
year(data$Crash.Date.Time) >= 2020 & year(data$Crash.Date.Time) <= 2023, ]
alcohol_contributed_data <- data[data$Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED" &
year(data$Crash.Date.Time) >= 2020 & year(data$Crash.Date.Time) <= 2023, ]
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
alcohol_contributed_data <- data[data$Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED" &
year(data$Crash.Date.Time) >= 2020 & year(data$Crash.Date.Time) <= 2023, ]
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
View(data)
filtered <- data %>%
select(Crash.Date.Time, Driver.Substance.Abuse)
data$Crash.Date.Time <- as.Date(data$Crash.Date.Time, format = "%m/%d/%Y")
data$Year <- format(data$Crash.Date.Time, "%Y")
head(data)
filtered <- data %>%
select(Year, Driver.Substance.Abuse)
View(filtered)
# filter data for only alcohol contributed crashes
alcohol_contributed_data <- data[data$Driver.Substance.Abuse == "ALCOHOL CONTRIBUTED", ]
count_data <- alcohol_contributed_data %>%
group_by(Year) %>%
summarise(Count = n())
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
print(alcohol_related_accidents_overtime)
covid_start <- as.Date("2020-04-01")
covid_end <- as.Date("2022-04-01")
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
geom_vline(xintercept = as.numeric(covid_end), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
print(alcohol_related_accidents_overtime)
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
print(alcohol_related_accidents_overtime)
# creating marker dates
covid_start <- "2020"
alcohol_related_accidents_overtime <- ggplot(count_data, aes(x = Year, y = Count)) +
geom_bar(stat = "identity", fill = "blue", color = "blue") +
theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
geom_vline(xintercept = as.numeric(covid_start), color = "red", linetype = "dashed") +
labs(title = "Number of Alcohol-Related Vehicle Crashes Over Time in Maryland",
x = "Date", y = "Number of Crashes")
print(alcohol_related_accidents_overtime)
setwd("/Users/meha/Desktop/INFO/info201/code/assignment-04-mehasingal")
mcrash_data <- read.csv("/Users/stlp/Documents/INFO201/exploratory-analysis-p02-mehasingal/maryland_crash_report.csv")
setwd("/Users/meha/Desktop/INFO/info201/code/exploratory-analysis-p02-mehasingal")
mcrash_data <- read.csv("maryland_crash_report.csv")
summary_crashes <- list()
summary_crashes$route_crash <- mcrash_data %>%
group_by(Road.Name, Vehicle.Movement) %>%
summarise(report_num = n()) %>%
arrange(desc(report_num)) %>%
filter(report_num == max(report_num, na.rm = TRUE))
print(summary_crashes$route_crash)
summary_crashes$weather_crash <- mcrash_data %>%
group_by(Weather, Surface.Condition) %>%
summarise(report_num = n()) %>%
arrange(desc(report_num)) %>%
filter(report_num == max(report_num, na.rm = TRUE))
print(summary_crashes$weather_crash)
summary_crashes$model_crash <- mcrash_data %>%
filter(Injury.Severity == "FATAL INJURY") %>%
group_by(Vehicle.Model, Vehicle.Make) %>%
summarise(report_num = n()) %>%
arrange(desc(report_num)) %>%
filter(report_num == max(report_num, na.rm = TRUE))
print(summary_crashes$model_crash)
summary_crashes$collision_crash <- mcrash_data %>%
filter(Light == "DAYLIGHT") %>%
group_by(Collision.Type) %>%
summarise(report_num = n()) %>%
arrange(desc(report_num)) %>%
filter(report_num == max(report_num, na.rm = TRUE))
print(summary_crashes$collision_crash)
summary_crashes$dmg_crash <- mcrash_data %>%
filter(Vehicle.Damage.Extent == "DESTROYED") %>%
group_by(Vehicle.Body.Type) %>%
summarise(report_num = n()) %>%
arrange(desc(report_num)) %>%
filter(report_num == max(report_num, na.rm = TRUE))
print(summary_crashes$dmg_crash)
mcrash_data <- read.csv("maryland_crash_report.csv")
sort1_chart <- mcrash_data %>%
group_by(Vehicle.Make) %>%
summarise(
total_collisions = n(),
fatal_injuries = sum(Injury.Severity == "FATAL INJURY"),
driver_faults = sum(Driver.At.Fault == "Yes"),
not_driver_faults = sum(Driver.At.Fault == "No"),
unknown = sum(Driver.At.Fault == "Unknown")
) %>%
arrange(desc(total_collisions)) %>%
head(10)
table <- kable(sort1_chart, col.names = c("Vehicle Make", "Total Collisions", "Fatal Injuries", "Driver Faults", "Not Driver Faults", "Unknown Fault"))
library(ggplot2)
library(dplyr)
library(knitr)
sort1_chart <- mcrash_data %>%
group_by(Vehicle.Make) %>%
summarise(
total_collisions = n(),
fatal_injuries = sum(Injury.Severity == "FATAL INJURY"),
driver_faults = sum(Driver.At.Fault == "Yes"),
not_driver_faults = sum(Driver.At.Fault == "No"),
unknown = sum(Driver.At.Fault == "Unknown")
) %>%
arrange(desc(total_collisions)) %>%
head(10)
table <- kable(sort1_chart, col.names = c("Vehicle Make", "Total Collisions", "Fatal Injuries", "Driver Faults", "Not Driver Faults", "Unknown Fault"))
print(table)
